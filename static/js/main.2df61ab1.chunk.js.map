{"version":3,"sources":["components/BusStopMap.js","components/BusServiceDropdown.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["BusStopMap","stops","busNumberLookup","markers","map","stop","Marker","position","x","y","key","stopId","Popup","name","services","busNumbersString","service","slice","length","getCommaSeparatedBusNumbersFromServices","Map","className","center","zoom","TileLayer","url","attribution","BusServiceDropdown","onBusServiceChosen","options","Object","keys","busService","value","onChange","event","target","sidebar","selectedBusNumber","App","useState","setStops","setBusNumberLookup","selectedBusService","setSelectedBusService","setSelectedBusNumber","useEffect","fetch","then","res","json","obJOfStops","busStops","filter","includes","Sidebar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OA6CeA,MAzCf,YAAiD,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,gBAUnBC,EAAUF,EAAMG,KAAI,SAAAC,GAEtB,OACI,kBAACC,EAAA,EAAD,CACIC,SAAU,CAACF,EAAKG,EAAGH,EAAKI,GACxBC,IAAKL,EAAKM,QAEV,kBAACC,EAAA,EAAD,mBACgBP,EAAKQ,KACjB,6BAFJ,WAfZ,SAAiDC,GAC7C,IADuD,EACnDC,EAAmB,GADgC,cAEjCD,GAFiC,IAEvD,2BAAgC,CAAC,IAAtBE,EAAqB,QAC5BD,GAAoBb,EAAgBc,GAAW,MAHI,8BAKvD,OAAOD,EAAiBE,MAAM,EAAGF,EAAiBG,OAAS,GAatCC,CAAwCd,EAAKS,eAkBtE,OATI,kBAACM,EAAA,EAAD,CAAKC,UAAU,MACXC,OAJS,CAAC,WAAY,UAIJC,KAAM,MACxB,kBAACC,EAAA,EAAD,CACIC,IAAI,4FACJC,YAAY,mIAEfvB,ICJEwB,MAhCf,YAKO,IAHCzB,EAGF,EAHEA,gBACA0B,EAEF,EAFEA,mBAKEC,EADcC,OAAOC,KAAK7B,GACJE,KAAI,SAAA4B,GAAU,OACtC,4BACIC,MAAOD,EACPtB,IAAKsB,GAER9B,EAAgB8B,OAQrB,OACI,4BAAQX,UAAU,iBACdR,KAAK,aACLqB,SAPR,SAAwBC,GACpBP,EAAmBO,EAAMC,OAAOH,SAQhC,2DACCJ,ICfMQ,MAZf,YAAuC,IAArBC,EAAoB,EAApBA,kBAElB,OACI,6BAASjB,UAAU,WACf,yBAAKA,UAAU,cACdiB,KC8CMC,MAhDf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENvC,EAFM,KAECwC,EAFD,OAGiCD,mBAAS,IAH1C,mBAGNtC,EAHM,KAGWwC,EAHX,OAIuCF,mBAAS,IAJhD,mBAING,EAJM,KAIcC,EAJd,OAKqCJ,mBAAS,IAL9C,mBAKNF,EALM,KAKaO,EALb,KAkCb,OA3BAC,qBAAU,WACRD,EAAqB3C,EAAgByC,MACpC,CAACA,IAaJG,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAU,OAAIV,EAASU,EAAWC,eACzC,IAEHN,qBAAU,WACRC,MAAM,uDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA9C,GAAe,OAAIwC,EAAmBxC,QAC7C,IAGD,yBAAKmB,UAAU,OACb,kBAAC,EAAD,CAAYpB,MApBQA,EAAMoD,QAAO,SAAAhD,GACjC,OAAOA,EAAKS,SAASwC,SAASX,MAmB2BzC,gBAAiBA,IAC1E,kBAAC,EAAD,CACEA,gBAAiBA,EACjB0B,mBA5BN,SAAkCI,GAChCY,EAAsBZ,MA6BpB,kBAACuB,EAAD,CACEjB,kBAAmBA,MCpCPkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2df61ab1.chunk.js","sourcesContent":["import React from 'react'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\nimport '../styles.css';\n\nfunction BusStopMap({ stops, busNumberLookup }) {\n\n    function getCommaSeparatedBusNumbersFromServices(services) {\n        let busNumbersString = ''\n        for (const service of services) {\n            busNumbersString += busNumberLookup[service] + \", \"\n        }\n        return busNumbersString.slice(0, busNumbersString.length - 2)\n    }\n\n    const markers = stops.map(stop => {\n\n        return (\n            <Marker\n                position={[stop.x, stop.y]}\n                key={stop.stopId}\n            >\n                <Popup>\n                    Stop name: {stop.name}\n                    <br></br>\n                    Busses: {getCommaSeparatedBusNumbersFromServices(stop.services)}\n                </Popup>\n            </Marker>\n        )\n    });\n\n    const position = [55.948714, -3.199913]\n\n    const map = (\n        <Map className='map'\n            center={position} zoom={11.5}>\n            <TileLayer\n                url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}{r}.png\"\n                attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://carto.com/attributions\">CARTO</a>' \n            />\n            {markers}\n        </Map>\n    )\n    return map\n}\n\nexport default BusStopMap;","import React from 'react'\nimport '../styles.css';\n\nfunction BusServiceDropdown(\n    {\n        busNumberLookup,\n        onBusServiceChosen\n    }\n    ) {\n\n    const busServices = Object.keys(busNumberLookup);\n    const options = busServices.map(busService => (\n        <option\n            value={busService}\n            key={busService}\n        >\n        {busNumberLookup[busService]}\n        </option>\n    ))\n\n    function onSelectChange(event) {\n        onBusServiceChosen(event.target.value)\n    }\n\n    return(\n        <select className='service-select'\n            name=\"Select Bus\"\n            onChange={onSelectChange}\n        >\n        <option>Please Select a Service</option>\n        {options}\n        </select>\n        )\n}\n\nexport default BusServiceDropdown;","import React from 'react';\nimport '../styles.css';\n\nfunction sidebar({selectedBusNumber}) {\n\nreturn (\n    <section className='sidebar'>\n        <div className='number-box'>\n        {selectedBusNumber}\n        </div>\n    </section>\n    \n)\n    }\n\nexport default sidebar;","import React, { useEffect, useState } from 'react';\nimport BusStopMap from './components/BusStopMap.js';\nimport BusServiceDropdown from './components/BusServiceDropdown.js';\nimport Sidebar from './components/Sidebar.js';\nimport './styles.css';\n\nfunction App() {\n\n  const [stops, setStops] = useState([]);\n  const [busNumberLookup, setBusNumberLookup] = useState({});\n  const [selectedBusService, setSelectedBusService] = useState(\"\")\n  const [selectedBusNumber, setSelectedBusNumber] = useState(\"\")\n\n  useEffect(() => {\n    setSelectedBusNumber(busNumberLookup[selectedBusService])\n  }, [selectedBusService])\n\n  function updateSelectedBusService(busService){\n    setSelectedBusService(busService)\n  }\n\n  function getFilterStopsBySelectedBusService(){\n    const filteredStops = stops.filter(stop => {\n      return stop.services.includes(selectedBusService)\n    })\n    return filteredStops\n  }\n\n  useEffect(() => {\n    fetch('https://lothian-bus.herokuapp.com/')\n      .then(res => res.json())\n      .then(obJOfStops => setStops(obJOfStops.busStops))\n  }, [])\n\n  useEffect(() => {\n    fetch('https://lothian-bus.herokuapp.com/busServiceNumbers')\n      .then(res => res.json())\n      .then(busNumberLookup => setBusNumberLookup(busNumberLookup))\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <BusStopMap stops={getFilterStopsBySelectedBusService()} busNumberLookup={busNumberLookup}/>\n      <BusServiceDropdown \n        busNumberLookup={busNumberLookup}\n        onBusServiceChosen={updateSelectedBusService}\n      />\n      <Sidebar\n        selectedBusNumber={selectedBusNumber}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}